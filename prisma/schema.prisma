// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String
  mbti  MBTI?

  posts        Post[]
  votes        Vote[]
  comments     Comment[]
  postReaction PostReaction[]
  commentReaction CommentReaction[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
}

enum MBTI {
  ISTJ
  ISFJ
  INFJ
  INTJ
  ISTP
  ISFP
  INFP
  INTP
  ESTP
  ESFP
  ENFP
  ENTP
  ESTJ
  ESFJ
  ENFJ
  ENTJ
}

model Post {
  id          String @id @default(uuid())
  title       String
  description String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comment Comment[]

  type PostType

  groupId String?
  group   PostGroup? @relation(fields: [groupId], references: [id])

  poll Poll?

  viewCount    Int            @default(0)
  postReaction PostReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PostType {
  POST
  POLL
}

model PostGroup {
  id          String   @id
  name        String
  description String?
  posts       Post[]
  createAt    DateTime @default(now())
}

model Poll {
  id      String       @id @default(uuid())
  choices PollChoice[]

  postId String @unique
  post   Post   @relation(fields: [postId], references: [id])

  votes Vote[]
}

model PollChoice {
  id       String  @id @default(uuid())
  index    Int
  main     String
  imageUrl String?

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id])

  votes Vote[]
}

model Vote {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id])

  pollChoiceId String
  PollChoice   PollChoice @relation(fields: [pollChoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  childComments Comment[] @relation("ChildComments")

  parentCommentId Int?
  parentComment   Comment? @relation("ChildComments", fields: [parentCommentId], references: [id])

  commentReaction CommentReaction[]
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
}

model PostReaction {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  reactionType REACTION_TYPE

  createdAt DateTime @default(now())

  @@unique([postId, authorId])
}

model CommentReaction {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  reactionType REACTION_TYPE

  createdAt DateTime @default(now())

  @@unique([commentId, authorId])
}

enum REACTION_TYPE {
  like
  dislike
}
