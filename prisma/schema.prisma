// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       String     @id @default(uuid())
  email    String     @unique
  name     String?
  polls    Poll[]
  votes    Vote[]
  UserMbti UserMbti[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserMbti {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  ei        EI
  sn        SN
  ft        FT
  jp        JP
  updatedAt DateTime @default(now()) @updatedAt
}

enum EI {
  E
  I
}

enum SN {
  S
  N
}

enum FT {
  F
  T
}

enum JP {
  J
  P
}

model Poll {
  id          String       @id @default(uuid())
  title       String
  description String
  choices     PollChoice[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PollChoice {
  id    String @id @default(uuid())
  index Int
  main  String
  sub   String

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id])

  votes Vote[]
}

model Vote {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  pollChoiceId String
  PollChoice   PollChoice @relation(fields: [pollChoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
