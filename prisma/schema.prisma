// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  mbti   MBTI?
  status UserStatus @default(DEFAULT)

  communities      UserCommunity[]
  ownCommunity     Community[]
  posts            Post[]
  votes            Vote[]
  comments         Comment[]        @relation("AuthorRelation")
  targetedComments Comment[]        @relation("TargetUserRelation")
  postLike         PostLike[]
  postDislike      PostDislike[]
  commentLike      CommentLike[]
  commentDislike   CommentDislike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum MBTI {
  ISTJ
  ISFJ
  INFJ
  INTJ
  ISTP
  ISFP
  INFP
  INTP
  ESTP
  ESFP
  ENFP
  ENTP
  ESTJ
  ESFJ
  ENFJ
  ENTJ
}

enum UserStatus {
  DEFAULT
  DELETED
}

model Community {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  topics      CommunityTopic[] @relation("CommunityTopics")

  bannerUrl String?
  iconUrl   String?

  ownerId String
  owner   User            @relation(fields: [ownerId], references: [id])
  users   UserCommunity[]

  posts Post[]
}

model UserCommunity {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@id([userId, communityId])
}

model CommunityTopic {
  id          String      @id
  name        String      @unique
  communities Community[] @relation("CommunityTopics")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  images      String[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  comment Comment[]

  type PostType

  communityId String
  community   Community @relation(fields: [communityId], references: [id])

  poll Poll?

  viewCount Int @default(0)

  postLike    PostLike[]
  postDislike PostDislike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PostType {
  POST
  POLL
}

model Poll {
  id      String       @id @default(uuid())
  choices PollChoice[]

  postId String @unique
  post   Post   @relation(fields: [postId], references: [id])

  votes Vote[]
}

model PollChoice {
  id       String  @id @default(uuid())
  index    Int
  main     String
  imageUrl String?

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id])

  votes Vote[]
}

model Vote {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id])

  pollChoiceId String
  PollChoice   PollChoice @relation(fields: [pollChoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  authorId String
  author   User   @relation("AuthorRelation", fields: [authorId], references: [id])

  postId String?
  post   Post?   @relation(fields: [postId], references: [id])

  childComments Comment[] @relation("ChildComments")

  parentCommentId Int?
  parentComment   Comment? @relation("ChildComments", fields: [parentCommentId], references: [id])

  commentLike    CommentLike[]
  commentDislike CommentDislike[]

  targetUserId String?
  targetUser   User?   @relation("TargetUserRelation", fields: [targetUserId], references: [id])

  status COMMENT_STATUS @default(default)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum COMMENT_STATUS {
  default
  deleted
}

model PostLike {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@unique([postId, authorId])
}

model PostDislike {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@unique([postId, authorId])
}

model CommentLike {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@unique([commentId, authorId])
}

model CommentDislike {
  id Int @id @default(autoincrement())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())

  @@unique([commentId, authorId])
}

enum REACTION_TYPE {
  like
  dislike
}
